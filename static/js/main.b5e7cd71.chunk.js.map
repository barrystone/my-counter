{"version":3,"sources":["components/sumValue.jsx","components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["SumValue","sumColor","color","sum","this","props","counters","map","c","value","className","style","sumOfEachValue","Component","Navbar","href","aria-label","class","totalCounters","Counter","counter","onDelete","onIncrement","id","getBadgeClasses","formatCount","onClick","classes","Counters","onReset","key","App","state","handleIncrement","console","log","index","indexOf","setState","handleDelete","counterId","filter","handleReset","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5e7cd71.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass SumValue extends Component {\r\n  sumOfEachValue() {\r\n    let sum = 0;\r\n    this.props.counters.map(c => {\r\n      sum += c.value;\r\n    });\r\n    return sum;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"badge badge-pill badge badge-info\">\r\n        SUM of all stuffs&nbsp;:&nbsp;\r\n        <span className=\"sumColor\" style={this.sumColor}>\r\n          {this.sumOfEachValue()}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n  sumColor = {\r\n    color: \"#f6e58d\"\r\n  };\r\n}\r\n\r\nexport default SumValue;\r\n","import React, { Component } from \"react\";\r\nimport SumValue from \"./sumValue\";\r\nconst Navbar = props => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li>\r\n              <b style={{ color: \"#B33771\" }}>Your list&nbsp;</b>:&nbsp;\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <div className=\"badge badge-pill badge-success\">\r\n                Product Categories&nbsp;:&nbsp;\r\n                <span style={{ color: \"#ffcccc\" }}>{props.totalCounters}</span>\r\n              </div>\r\n              &nbsp;\r\n              <SumValue counters={props.counters} />\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    const { counter, onDelete, onIncrement } = this.props;\r\n    // console.log(\"props\", this.props);\r\n    return (\r\n      <div>\r\n        <h4>title: {counter.id}</h4>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => onIncrement(counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => onDelete(counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-3 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"zero\" : value;\r\n  }\r\n}\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport Counter from \"./counter\";\r\nconst Counters = props => {\r\n  const { onDelete, onIncrement, onReset, counters } = props;\r\n  return (\r\n    <div>\r\n      <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n        Reset\r\n      </button>\r\n      {counters.map(counter => (\r\n        <Counter\r\n          key={counter.id}\r\n          onDelete={onDelete}\r\n          onIncrement={onIncrement}\r\n          counter={counter}\r\n        ></Counter>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counters;\r\n","import React from \"react\";\nimport { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 1 },\n      { id: 3, value: 2 },\n      { id: 4, value: 3 }\n    ]\n  };\n  handleIncrement = counter => {\n    console.log(counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n  handleDelete = counterId => {\n    console.log(\"handleDelete Clicked!\", counterId);\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          counters={this.state.counters}\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            counters={this.state.counters}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}